import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TicTacToe {
    private static JButton[] buttons = new JButton[9]; // Массив кнопок

    public static void main(String[] args) {
        JFrame frame = new JFrame("Крестики-нолики");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 300);
        frame.setLayout(new GridLayout(3, 3));

        // Инициализируем кнопки
        for (int i = 0; i < 9; i++) {
            buttons[i] = new JButton("");
            frame.add(buttons[i]);
            buttons[i].setFont(new Font("Arial", Font.PLAIN, 40));
            final int index = i;
            buttons[i].addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    buttonClick(index);
                }
            });
        }

        frame.setVisible(true);
    }

    private static void buttonClick(int index) {
        if (buttons[index].getText().equals("")) {
            buttons[index].setText("X"); // Пусть X будет вашим символом, игрок может быть и O
            buttons[index].setEnabled(false);

            // Проверяем выигрыш после каждого хода
            if (checkWin("X")) {
                highlightWinningCombination("X");
                JOptionPane.showMessageDialog(null, "Игрок X победил!");
                System.exit(0);
            } else if (isBoardFull()) {
                JOptionPane.showMessageDialog(null, "Ничья!");
                System.exit(0);
            }
        }
    }

    // Проверка на победу
    private static boolean checkWin(String symbol) {
        // Проверяем горизонтали, вертикали и диагонали
        for (int i = 0; i < 3; i++) {
            if (buttons[i].getText().equals(symbol) && buttons[i + 3].getText().equals(symbol) && buttons[i + 6].getText().equals(symbol)) {
                return true; // Горизонтальная линия
            }
            if (buttons[i * 3].getText().equals(symbol) && buttons[i * 3 + 1].getText().equals(symbol) && buttons[i * 3 + 2].getText().equals(symbol)) {
                return true; // Вертикальная линия
            }
        }

        // Диагонали
        if (buttons[0].getText().equals(symbol) && buttons[4].getText().equals(symbol) && buttons[8].getText().equals(symbol)) {
            return true; // Главная диагональ
        }
        if (buttons[2].getText().equals(symbol) && buttons[4].getText().equals(symbol) && buttons[6].getText().equals(symbol)) {
            return true; // Побочная диагональ
        }

        return false;
    }

    // Проверка на ничью
    private static boolean isBoardFull() {
        for (int i = 0; i < 9; i++) {
            if (buttons[i].getText().equals("")) {
                return false; // На доске есть пустые клетки, игра продолжается
            }
        }
        return true; // Доска полностью заполнена, ничья
    }

    // Подсветка выигрышной комбинации
    private static void highlightWinningCombination(String symbol) {
        // Подсветить кнопки, составляющие выигрышную комбинацию
        for (int i = 0; i < 3; i++) {
            if (buttons[i].getText().equals(symbol) && buttons[i + 3].getText().equals(symbol) && buttons[i + 6].getText().equals(symbol)) {
                buttons[i].setBackground(Color.GREEN);
                buttons[i + 3].setBackground(Color.GREEN);
                buttons[i + 6].setBackground(Color.GREEN);
                return;
            }
            if (buttons[i * 3].getText().equals(symbol) && buttons[i * 3 + 1].getText().equals(symbol) && buttons[i * 3 + 2].getText().equals(symbol)) {
                buttons[i * 3].setBackground(Color.GREEN);
                buttons[i * 3 + 1].setBackground(Color.GREEN);
                buttons[i * 3 + 2].setBackground(Color.GREEN);
                return;
            }
        }

        // Подсветить диагонали
        if (buttons[0].getText().equals(symbol) && buttons[4].getText().equals(symbol) && buttons[8].getText().equals(symbol)) {
            buttons[0].setBackground(Color.GREEN);
            buttons[4].setBackground(Color.GREEN);
            buttons[8].setBackground(Color.GREEN);
        }
        if (buttons[2].getText().equals(symbol) && buttons[4].getText().equals(symbol) && buttons[6].getText().equals(symbol)) {
            buttons[2].setBackground(Color.GREEN);
            buttons[4].setBackground(Color.GREEN);
            buttons[6].setBackground(Color.GREEN);
        }
    }
}
